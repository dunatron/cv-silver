<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 17/10/16
 * Time: 1:30 PM
 */
class LandingPage extends Page
{

    private static $singular_name        = "Landing Page";
    private static $plural_name          = "Landing Pages";
    private static $db = array(
        'Phone' => 'Varchar(30)',
        'Email' => 'Varchar(60)',
        'Intro' => 'HTMLText'
    );
    
    static $defaults = array (
	    'ShowInMenus' => true,
	    'ShowInSearch' => true
    );
    
    private static $has_one = array(
        'ProfileImage' => 'Image'
    );

    private static $has_many = array(
        'EducationPages' => 'EducationPage'
    );

    private static $many_many = array();

    private static $belongs_many_many = array();

    private static $many_many_extraFields = array();

    private static $casting = array();

    private static $default_sort = '';

    private static $field_labels = array();

    private static $summary_fields = array();

    private static $required_fields = array(); //enforced through the "validate" method

    private static $searchable_fields = array();

    private static $default_child = "";

    private static $can_be_root = true;

    private static $hide_ancestor = null;
    
    public function getCMSFields()
    {
        $fields = parent::getCMSFields();
        $fields->addFieldToTab('Root.Main', TextField::create('Phone', 'Phone number'), 'Metadata');
        $fields->addFieldToTab('Root.Main', TextField::create('Email', 'Email address'), 'Metadata');
        $fields->addFieldToTab('Root.Main', HtmlEditorField::create('Intro', 'Intro statement'), 'Metadata');
        $fields->addFieldToTab('Root.Main', UploadField::create('ProfileImage', 'Profile Photo'), 'Intro');
        
        $fields->removeByName('Content');
        return $fields; // TODO: Change the autogenerated stub
    }
    
}
class LandingPage_Controller extends Page_Controller
{

    /**
     * array (
     *     'action', // anyone can access this action
     *     'action' => true, // same as above
     *     'action' => 'ADMIN', // you must have ADMIN permissions to access this action
     *     'action' => '->checkAction' // you can only access this action if >checkAction() returns true
     * );
     * @var array
     */
    private static $allowed_actions = array(
        'getPortFolioData'
    );

    public function init()
    {
        parent::init();
    }

    /*
    * All Portfolio Objects
    */
    public function getPortfolioItems()
    {
        return Portfolio::get();
    }

    public function AssociatedEducationPages()
    {
        $pages = EducationPage::get();
        return $pages;
    }

    /*
     * All Skill Objects
     */
    public function getSkills()
    {
        return Skill::get();
    }

    /**
     * All Experience Objects
     */
    public function getExperiences()
    {
        return Experience::get();
    }

    /**
     * Get Top Rated Referees
     */
    public function getTopReferees()
    {
        $ref = Reference::get()->sort('Rating', 'DESC')->limit(3);
        return $ref;
    }

    /**
     * Get All Achievements
     */
    public function getAchievements()
    {
        return Achievement::get();
    }

    /**
     * Get All Achievement Types
     */
    public function getAchievementTypes()
    {
        return AchievementType::get();
    }

    /**
     * Get PortfolioData
     */
    public function getPortFolioData(){
        if (isset($_POST['portfolioID'])) {
          $portfolioID = ($_POST['portfolioID']);
            //$portfolio = Portfolio::get_by_id('ID',$portfolioID);
            $portfolio = Portfolio::get()->byID($portfolioID);
            //$images = PortfolioImages;
            $bannerImage = $portfolio->BannerImage();
            $relatedImages = $portfolio->PortfolioImages();

            $data = new ArrayData(array(
                'PortfolioTitle'  =>  $portfolio->SiteURL,
                'Stuff' =>  $portfolio->About,
                'BannerImage'   =>  $bannerImage,
                'AssocImages'  =>  $relatedImages
            ));
            echo $data->renderWith('PortFolioAjaxData');
        } else {
            return 'No Portfolio data for the specified ID G';
        }
    }

}


